config/config.go:10:20: mapstructure(kebab): got 'PORT' want 'port' (tagliatelle)
config/config.go:11:20: mapstructure(kebab): got 'RELEASE' want 'release' (tagliatelle)
config/config.go:12:20: mapstructure(kebab): got 'X_API_KEY' want 'x-api-key' (tagliatelle)
config/config.go:13:20: mapstructure(kebab): got 'JWT_KEY' want 'jwt-key' (tagliatelle)
config/config.go:14:20: mapstructure(kebab): got 'WORKER_POOL' want 'worker-pool' (tagliatelle)
config/config.go:16:17: mapstructure(kebab): got 'VERSION' want 'version' (tagliatelle)
config/config.go:18:26: mapstructure(kebab): got 'DB_HOST' want 'db-host' (tagliatelle)
config/config.go:19:26: mapstructure(kebab): got 'DB_PORT' want 'db-port' (tagliatelle)
config/config.go:20:26: mapstructure(kebab): got 'DB_USER' want 'db-user' (tagliatelle)
config/config.go:21:26: mapstructure(kebab): got 'DB_PASSWORD' want 'db-password' (tagliatelle)
config/config.go:22:26: mapstructure(kebab): got 'DB_SCHEMA' want 'db-schema' (tagliatelle)
config/config.go:24:19: mapstructure(kebab): got 'SENTRY_DSN' want 'sentry-dsn' (tagliatelle)
config/config.go:26:25: mapstructure(kebab): got 'NEWRELIC_APP' want 'newrelic-app' (tagliatelle)
config/config.go:27:25: mapstructure(kebab): got 'NEWRELIC_LICENSE' want 'newrelic-license' (tagliatelle)
config/config.go:29:29: mapstructure(kebab): got 'AXIOM_ORG_ID' want 'axiom-org-id' (tagliatelle)
config/config.go:30:29: mapstructure(kebab): got 'AXIOM_TOKEN' want 'axiom-token' (tagliatelle)
config/config.go:31:29: mapstructure(kebab): got 'AXIOM_DATASET' want 'axiom-dataset' (tagliatelle)
domain/alarm_policy.go:7:2: dot-imports: should not use dot imports (revive)
domain/alarm_policy.go:7:2: ST1001: should not use dot imports (stylecheck)
domain/alarm_policy.go:14:2: ST1001: should not use dot imports (stylecheck)
domain/alarm_policy.go:14:2: dot-imports: should not use dot imports (revive)
domain/assertion.go:7:2: dot-imports: should not use dot imports (revive)
domain/assertion.go:7:2: ST1001: should not use dot imports (stylecheck)
domain/assertion.go:14:2: dot-imports: should not use dot imports (revive)
domain/assertion.go:14:2: ST1001: should not use dot imports (stylecheck)
domain/check.go:8:2: dot-imports: should not use dot imports (revive)
domain/check.go:8:2: ST1001: should not use dot imports (stylecheck)
domain/job.go:8:2: dot-imports: should not use dot imports (revive)
domain/job.go:8:2: ST1001: should not use dot imports (stylecheck)
domain/job.go:16:2: ST1001: should not use dot imports (stylecheck)
domain/job.go:16:2: dot-imports: should not use dot imports (revive)
domain/monitor.go:7:2: ST1001: should not use dot imports (stylecheck)
domain/monitor.go:7:2: dot-imports: should not use dot imports (revive)
domain/monitor.go:15:2: dot-imports: should not use dot imports (revive)
domain/monitor.go:15:2: ST1001: should not use dot imports (stylecheck)
domain/monitor_status.go:7:2: dot-imports: should not use dot imports (revive)
domain/monitor_status.go:7:2: ST1001: should not use dot imports (stylecheck)
domain/monitor_status.go:14:2: dot-imports: should not use dot imports (revive)
domain/monitor_status.go:14:2: ST1001: should not use dot imports (stylecheck)
domain/organization.go:7:2: dot-imports: should not use dot imports (revive)
domain/organization.go:7:2: ST1001: should not use dot imports (stylecheck)
domain/organization.go:14:2: ST1001: should not use dot imports (stylecheck)
domain/organization.go:14:2: dot-imports: should not use dot imports (revive)
domain/payment.go:8:2: ST1001: should not use dot imports (stylecheck)
domain/payment.go:8:2: dot-imports: should not use dot imports (revive)
domain/payment.go:17:2: dot-imports: should not use dot imports (revive)
domain/payment.go:17:2: ST1001: should not use dot imports (stylecheck)
domain/user.go:8:2: dot-imports: should not use dot imports (revive)
domain/user.go:8:2: ST1001: should not use dot imports (stylecheck)
domain/user.go:17:2: dot-imports: should not use dot imports (revive)
domain/user.go:17:2: ST1001: should not use dot imports (stylecheck)
infra/db.go:8:2: blank-imports: a blank import should be only in a main or test package, or have a comment justifying it (revive)
infra/db.go:79:67: `occured` is a misspelling of `occurred` (misspell)
infra/lgr/logger.go:51:14: pass []any as any to func zapper.Info func(args ...interface{}) (asasalint)
infra/lgr/logger.go:55:14: pass []any as any to func zapper.Warn func(args ...interface{}) (asasalint)
infra/lgr/logger.go:59:15: pass []any as any to func zapper.Error func(args ...interface{}) (asasalint)
infra/lgr/logger.go:63:23: pass []any as any to func zapper.Infof func(template string, args ...interface{}) (asasalint)
infra/lgr/logger.go:67:24: pass []any as any to func zapper.Errorf func(template string, args ...interface{}) (asasalint)
infra/sentry.go:41:2: unnecessaryDefer: defer sentry.Flush(1 * time.Second) is placed just before return (gocritic)
module/cron/cron.go:98:72: importShadow: shadow of imported from 'github.com/Uptime-Checker/uptime_checker_api_go/task' package 'task' (gocritic)
module/gandalf/feature.go:4:2: dot-imports: should not use dot imports (revive)
module/gandalf/feature.go:4:2: ST1001: should not use dot imports (stylecheck)
module/gandalf/gandalf.go:14:32: non-wrapping format verb for fmt.Errorf. Use `%w` to format errors (errorlint)
module/gandalf/gandalf.go:17:32: non-wrapping format verb for fmt.Errorf. Use `%w` to format errors (errorlint)
module/gandalf/resource.go:4:2: dot-imports: should not use dot imports (revive)
module/gandalf/resource.go:4:2: ST1001: should not use dot imports (stylecheck)
module/watchdog/hit.go:50:2: ptrToRefParam: consider `headers' to be of non-pointer type (gocritic)
module/watchdog/hit.go:87:28: `bodyFormat` can be `fmt.Stringer` (interfacer)
module/watchdog/hit.go:87:68: ptrToRefParam: consider `headers' to be of non-pointer type (gocritic)
module/watchdog/hit.go:110:16: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:119:4: typeAssertChain: rewrite if-else to type switch statement (gocritic)
module/watchdog/hit.go:119:16: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:121:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:123:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:125:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:127:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:129:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/run.go:25:20: func `(*WatchDog).run` is unused (unused)
module/watchdog/run.go:80:20: func `(*WatchDog).gateCheck` is unused (unused)
pkg/number.go:11:12: G404: Use of weak random number generator (math/rand instead of crypto/rand) (gosec)
pkg/tracing.go:20:5: Error return value is not checked (errcheck)
service/monitor.go:35:2: ptrToRefParam: consider `headers' to be of non-pointer type (gocritic)
task/run_check.go:19:47: unused-parameter: parameter 'job' seems to be unused, consider removing or renaming it as _ (revive)
task/sync_products.go:19:30: unused-parameter: parameter 'tx' seems to be unused, consider removing or renaming it as _ (revive)
web/controller/monitor.go:54:21: json(snake): got 'bodyFormat' want 'body_format' (tagliatelle)
web/controller/monitor.go:61:30: json(snake): got 'globalAlarmSettings' want 'global_alarm_settings' (tagliatelle)
web/controller/monitor.go:62:30: json(snake): got 'alarmReminderInterval' want 'alarm_reminder_interval' (tagliatelle)
web/controller/monitor.go:63:30: json(snake): got 'alarmReminderCount' want 'alarm_reminder_count' (tagliatelle)
web/controller/monitor.go:65:22: json(snake): got 'checkSSL' want 'check_ssl' (tagliatelle)
web/controller/monitor.go:66:22: json(snake): got 'followRedirect' want 'follow_redirect' (tagliatelle)
web/controller/organization.go:49:16: json(snake): got 'planID' want 'plan_id' (tagliatelle)
web/controller/resp/error.go:54:22: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
web/controller/user.go:146:21: json(snake): got 'providerUID' want 'provider_uid' (tagliatelle)
web/middlelayer/auth.go:41:5: Error return value is not checked (errcheck)
web/routes.go:62:22: Function `registerUserHandlers->Protected->Protected$1` should pass the context parameter (contextcheck)
web/routes.go:66:30: Function `registerOrganizationHandlers->Protected->Protected$1` should pass the context parameter (contextcheck)
web/routes.go:78:25: Function `registerMonitorHandlers->Protected->Protected$1` should pass the context parameter (contextcheck)
