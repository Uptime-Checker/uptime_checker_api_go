domain/payment.go:62: line-length-limit: line is 123 characters, out of limit 120 (revive)
domain/resource/error_log.go:42: line-length-limit: line is 121 characters, out of limit 120 (revive)
infra/db.go:8:2: blank-imports: a blank import should be only in a main or test package, or have a comment justifying it (revive)
infra/db.go:22:21: flag-parameter: parameter 'enableLogging' seems to be a control flag, avoid control coupling (revive)
infra/sentry.go:20:21: add-constant: avoid magic numbers like '0.2', create a named constant for it (revive)
module/cron/cron.go:50:29: add-constant: avoid magic numbers like '60', create a named constant for it (revive)
module/cron/cron.go:50:33: add-constant: avoid magic numbers like '120', create a named constant for it (revive)
module/cron/cron.go:85:56: add-constant: avoid magic numbers like '20', create a named constant for it (revive)
module/cron/cron.go:98:72: importShadow: shadow of imported from 'github.com/Uptime-Checker/uptime_checker_api_go/task' package 'task' (gocritic)
module/cron/cron.go:98:72: import-shadowing: The name 'task' shadows an import name (revive)
module/watchdog/hit.go:46:23: flag-parameter: parameter 'followRedirect' seems to be a control flag, avoid control coupling (revive)
module/watchdog/hit.go:50:2: ptrToRefParam: consider `headers' to be of non-pointer type (gocritic)
module/watchdog/hit.go:87:28: `bodyFormat` can be `fmt.Stringer` (interfacer)
module/watchdog/hit.go:87:68: ptrToRefParam: consider `headers' to be of non-pointer type (gocritic)
module/watchdog/hit.go:110:16: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:119:4: typeAssertChain: rewrite if-else to type switch statement (gocritic)
module/watchdog/hit.go:119:16: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:121:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:123:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:125:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:127:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/hit.go:129:23: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
module/watchdog/run.go:25:20: func `(*WatchDog).run` is unused (unused)
module/watchdog/run.go:80:20: func `(*WatchDog).gateCheck` is unused (unused)
pkg/number.go:11:12: G404: Use of weak random number generator (math/rand instead of crypto/rand) (gosec)
pkg/tracing.go:20:5: Error return value is not checked (errcheck)
service/monitor.go:35:2: ptrToRefParam: consider `headers' to be of non-pointer type (gocritic)
task/run_check.go:19:47: unused-parameter: parameter 'job' seems to be unused, consider removing or renaming it as _ (revive)
task/sync_products.go:19:30: unused-parameter: parameter 'tx' seems to be unused, consider removing or renaming it as _ (revive)
web/controller/monitor.go:65:22: json(goCamel): got 'checkSSL' want 'checkSsl' (tagliatelle)
web/controller/resp/error.go:54:22: type assertion on error will fail on wrapped errors. Use errors.As to check for specific errors (errorlint)
web/middlelayer/auth.go:41:5: Error return value is not checked (errcheck)
web/routes.go:62:22: Function `registerUserHandlers->Protected->Protected$1` should pass the context parameter (contextcheck)
web/routes.go:66:30: Function `registerOrganizationHandlers->Protected->Protected$1` should pass the context parameter (contextcheck)
web/routes.go:78:25: Function `registerMonitorHandlers->Protected->Protected$1` should pass the context parameter (contextcheck)
web/routes.go:153:14: add-constant: string literal "/" appears, at least, 4 times, create a named constant for it (revive)
