//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var DailyReport = newDailyReportTable("public", "daily_report", "")

type dailyReportTable struct {
	postgres.Table

	//Columns
	ID               postgres.ColumnInteger
	SuccessfulChecks postgres.ColumnInteger
	ErrorChecks      postgres.ColumnInteger
	Downtime         postgres.ColumnInteger
	Date             postgres.ColumnDate
	MonitorID        postgres.ColumnInteger
	OrganizationID   postgres.ColumnInteger
	InsertedAt       postgres.ColumnTimestamp
	UpdatedAt        postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type DailyReportTable struct {
	dailyReportTable

	EXCLUDED dailyReportTable
}

// AS creates new DailyReportTable with assigned alias
func (a DailyReportTable) AS(alias string) *DailyReportTable {
	return newDailyReportTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new DailyReportTable with assigned schema name
func (a DailyReportTable) FromSchema(schemaName string) *DailyReportTable {
	return newDailyReportTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new DailyReportTable with assigned table prefix
func (a DailyReportTable) WithPrefix(prefix string) *DailyReportTable {
	return newDailyReportTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new DailyReportTable with assigned table suffix
func (a DailyReportTable) WithSuffix(suffix string) *DailyReportTable {
	return newDailyReportTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newDailyReportTable(schemaName, tableName, alias string) *DailyReportTable {
	return &DailyReportTable{
		dailyReportTable: newDailyReportTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newDailyReportTableImpl("", "excluded", ""),
	}
}

func newDailyReportTableImpl(schemaName, tableName, alias string) dailyReportTable {
	var (
		IDColumn               = postgres.IntegerColumn("id")
		SuccessfulChecksColumn = postgres.IntegerColumn("successful_checks")
		ErrorChecksColumn      = postgres.IntegerColumn("error_checks")
		DowntimeColumn         = postgres.IntegerColumn("downtime")
		DateColumn             = postgres.DateColumn("date")
		MonitorIDColumn        = postgres.IntegerColumn("monitor_id")
		OrganizationIDColumn   = postgres.IntegerColumn("organization_id")
		InsertedAtColumn       = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn        = postgres.TimestampColumn("updated_at")
		allColumns             = postgres.ColumnList{IDColumn, SuccessfulChecksColumn, ErrorChecksColumn, DowntimeColumn, DateColumn, MonitorIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns         = postgres.ColumnList{SuccessfulChecksColumn, ErrorChecksColumn, DowntimeColumn, DateColumn, MonitorIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return dailyReportTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:               IDColumn,
		SuccessfulChecks: SuccessfulChecksColumn,
		ErrorChecks:      ErrorChecksColumn,
		Downtime:         DowntimeColumn,
		Date:             DateColumn,
		MonitorID:        MonitorIDColumn,
		OrganizationID:   OrganizationIDColumn,
		InsertedAt:       InsertedAtColumn,
		UpdatedAt:        UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
