//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MonitorIntegration = newMonitorIntegrationTable("public", "monitor_integration", "")

type monitorIntegrationTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnInteger
	Type           postgres.ColumnInteger
	Config         postgres.ColumnString
	OrganizationID postgres.ColumnInteger
	InsertedAt     postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MonitorIntegrationTable struct {
	monitorIntegrationTable

	EXCLUDED monitorIntegrationTable
}

// AS creates new MonitorIntegrationTable with assigned alias
func (a MonitorIntegrationTable) AS(alias string) *MonitorIntegrationTable {
	return newMonitorIntegrationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MonitorIntegrationTable with assigned schema name
func (a MonitorIntegrationTable) FromSchema(schemaName string) *MonitorIntegrationTable {
	return newMonitorIntegrationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MonitorIntegrationTable with assigned table prefix
func (a MonitorIntegrationTable) WithPrefix(prefix string) *MonitorIntegrationTable {
	return newMonitorIntegrationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MonitorIntegrationTable with assigned table suffix
func (a MonitorIntegrationTable) WithSuffix(suffix string) *MonitorIntegrationTable {
	return newMonitorIntegrationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMonitorIntegrationTable(schemaName, tableName, alias string) *MonitorIntegrationTable {
	return &MonitorIntegrationTable{
		monitorIntegrationTable: newMonitorIntegrationTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newMonitorIntegrationTableImpl("", "excluded", ""),
	}
}

func newMonitorIntegrationTableImpl(schemaName, tableName, alias string) monitorIntegrationTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		TypeColumn           = postgres.IntegerColumn("type")
		ConfigColumn         = postgres.StringColumn("config")
		OrganizationIDColumn = postgres.IntegerColumn("organization_id")
		InsertedAtColumn     = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, TypeColumn, ConfigColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{TypeColumn, ConfigColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return monitorIntegrationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Type:           TypeColumn,
		Config:         ConfigColumn,
		OrganizationID: OrganizationIDColumn,
		InsertedAt:     InsertedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
