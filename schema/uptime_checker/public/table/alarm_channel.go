//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var AlarmChannel = newAlarmChannelTable("public", "alarm_channel", "")

type alarmChannelTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnInteger
	On             postgres.ColumnBool
	UserContactID  postgres.ColumnInteger
	MonitorID      postgres.ColumnInteger
	OrganizationID postgres.ColumnInteger
	IntegrationID  postgres.ColumnInteger
	InsertedAt     postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AlarmChannelTable struct {
	alarmChannelTable

	EXCLUDED alarmChannelTable
}

// AS creates new AlarmChannelTable with assigned alias
func (a AlarmChannelTable) AS(alias string) *AlarmChannelTable {
	return newAlarmChannelTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AlarmChannelTable with assigned schema name
func (a AlarmChannelTable) FromSchema(schemaName string) *AlarmChannelTable {
	return newAlarmChannelTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AlarmChannelTable with assigned table prefix
func (a AlarmChannelTable) WithPrefix(prefix string) *AlarmChannelTable {
	return newAlarmChannelTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AlarmChannelTable with assigned table suffix
func (a AlarmChannelTable) WithSuffix(suffix string) *AlarmChannelTable {
	return newAlarmChannelTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAlarmChannelTable(schemaName, tableName, alias string) *AlarmChannelTable {
	return &AlarmChannelTable{
		alarmChannelTable: newAlarmChannelTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newAlarmChannelTableImpl("", "excluded", ""),
	}
}

func newAlarmChannelTableImpl(schemaName, tableName, alias string) alarmChannelTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		OnColumn             = postgres.BoolColumn("on")
		UserContactIDColumn  = postgres.IntegerColumn("user_contact_id")
		MonitorIDColumn      = postgres.IntegerColumn("monitor_id")
		OrganizationIDColumn = postgres.IntegerColumn("organization_id")
		IntegrationIDColumn  = postgres.IntegerColumn("integration_id")
		InsertedAtColumn     = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, OnColumn, UserContactIDColumn, MonitorIDColumn, OrganizationIDColumn, IntegrationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{OnColumn, UserContactIDColumn, MonitorIDColumn, OrganizationIDColumn, IntegrationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return alarmChannelTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		On:             OnColumn,
		UserContactID:  UserContactIDColumn,
		MonitorID:      MonitorIDColumn,
		OrganizationID: OrganizationIDColumn,
		IntegrationID:  IntegrationIDColumn,
		InsertedAt:     InsertedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
