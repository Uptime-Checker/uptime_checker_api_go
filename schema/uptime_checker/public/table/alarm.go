//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Alarm = newAlarmTable("public", "alarm", "")

type alarmTable struct {
	postgres.Table

	//Columns
	ID                 postgres.ColumnInteger
	Ongoing            postgres.ColumnBool
	ResolvedAt         postgres.ColumnTimestamp
	TriggeredByCheckID postgres.ColumnInteger
	ResolvedByCheckID  postgres.ColumnInteger
	MonitorID          postgres.ColumnInteger
	OrganizationID     postgres.ColumnInteger
	InsertedAt         postgres.ColumnTimestamp
	UpdatedAt          postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AlarmTable struct {
	alarmTable

	EXCLUDED alarmTable
}

// AS creates new AlarmTable with assigned alias
func (a AlarmTable) AS(alias string) *AlarmTable {
	return newAlarmTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AlarmTable with assigned schema name
func (a AlarmTable) FromSchema(schemaName string) *AlarmTable {
	return newAlarmTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AlarmTable with assigned table prefix
func (a AlarmTable) WithPrefix(prefix string) *AlarmTable {
	return newAlarmTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AlarmTable with assigned table suffix
func (a AlarmTable) WithSuffix(suffix string) *AlarmTable {
	return newAlarmTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAlarmTable(schemaName, tableName, alias string) *AlarmTable {
	return &AlarmTable{
		alarmTable: newAlarmTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newAlarmTableImpl("", "excluded", ""),
	}
}

func newAlarmTableImpl(schemaName, tableName, alias string) alarmTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		OngoingColumn            = postgres.BoolColumn("ongoing")
		ResolvedAtColumn         = postgres.TimestampColumn("resolved_at")
		TriggeredByCheckIDColumn = postgres.IntegerColumn("triggered_by_check_id")
		ResolvedByCheckIDColumn  = postgres.IntegerColumn("resolved_by_check_id")
		MonitorIDColumn          = postgres.IntegerColumn("monitor_id")
		OrganizationIDColumn     = postgres.IntegerColumn("organization_id")
		InsertedAtColumn         = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn          = postgres.TimestampColumn("updated_at")
		allColumns               = postgres.ColumnList{IDColumn, OngoingColumn, ResolvedAtColumn, TriggeredByCheckIDColumn, ResolvedByCheckIDColumn, MonitorIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{OngoingColumn, ResolvedAtColumn, TriggeredByCheckIDColumn, ResolvedByCheckIDColumn, MonitorIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return alarmTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Ongoing:            OngoingColumn,
		ResolvedAt:         ResolvedAtColumn,
		TriggeredByCheckID: TriggeredByCheckIDColumn,
		ResolvedByCheckID:  ResolvedByCheckIDColumn,
		MonitorID:          MonitorIDColumn,
		OrganizationID:     OrganizationIDColumn,
		InsertedAt:         InsertedAtColumn,
		UpdatedAt:          UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
