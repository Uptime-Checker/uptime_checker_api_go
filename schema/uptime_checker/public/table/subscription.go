//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Subscription = newSubscriptionTable("public", "subscription", "")

type subscriptionTable struct {
	postgres.Table

	//Columns
	ID                 postgres.ColumnInteger
	Status             postgres.ColumnString
	StartsAt           postgres.ColumnTimestamp
	ExpiresAt          postgres.ColumnTimestamp
	CanceledAt         postgres.ColumnTimestamp
	IsTrial            postgres.ColumnBool
	ExternalID         postgres.ColumnString
	ExternalCustomerID postgres.ColumnString
	PlanID             postgres.ColumnInteger
	ProductID          postgres.ColumnInteger
	OrganizationID     postgres.ColumnInteger
	InsertedAt         postgres.ColumnTimestamp
	UpdatedAt          postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type SubscriptionTable struct {
	subscriptionTable

	EXCLUDED subscriptionTable
}

// AS creates new SubscriptionTable with assigned alias
func (a SubscriptionTable) AS(alias string) *SubscriptionTable {
	return newSubscriptionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SubscriptionTable with assigned schema name
func (a SubscriptionTable) FromSchema(schemaName string) *SubscriptionTable {
	return newSubscriptionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SubscriptionTable with assigned table prefix
func (a SubscriptionTable) WithPrefix(prefix string) *SubscriptionTable {
	return newSubscriptionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SubscriptionTable with assigned table suffix
func (a SubscriptionTable) WithSuffix(suffix string) *SubscriptionTable {
	return newSubscriptionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSubscriptionTable(schemaName, tableName, alias string) *SubscriptionTable {
	return &SubscriptionTable{
		subscriptionTable: newSubscriptionTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newSubscriptionTableImpl("", "excluded", ""),
	}
}

func newSubscriptionTableImpl(schemaName, tableName, alias string) subscriptionTable {
	var (
		IDColumn                 = postgres.IntegerColumn("id")
		StatusColumn             = postgres.StringColumn("status")
		StartsAtColumn           = postgres.TimestampColumn("starts_at")
		ExpiresAtColumn          = postgres.TimestampColumn("expires_at")
		CanceledAtColumn         = postgres.TimestampColumn("canceled_at")
		IsTrialColumn            = postgres.BoolColumn("is_trial")
		ExternalIDColumn         = postgres.StringColumn("external_id")
		ExternalCustomerIDColumn = postgres.StringColumn("external_customer_id")
		PlanIDColumn             = postgres.IntegerColumn("plan_id")
		ProductIDColumn          = postgres.IntegerColumn("product_id")
		OrganizationIDColumn     = postgres.IntegerColumn("organization_id")
		InsertedAtColumn         = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn          = postgres.TimestampColumn("updated_at")
		allColumns               = postgres.ColumnList{IDColumn, StatusColumn, StartsAtColumn, ExpiresAtColumn, CanceledAtColumn, IsTrialColumn, ExternalIDColumn, ExternalCustomerIDColumn, PlanIDColumn, ProductIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{StatusColumn, StartsAtColumn, ExpiresAtColumn, CanceledAtColumn, IsTrialColumn, ExternalIDColumn, ExternalCustomerIDColumn, PlanIDColumn, ProductIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return subscriptionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Status:             StatusColumn,
		StartsAt:           StartsAtColumn,
		ExpiresAt:          ExpiresAtColumn,
		CanceledAt:         CanceledAtColumn,
		IsTrial:            IsTrialColumn,
		ExternalID:         ExternalIDColumn,
		ExternalCustomerID: ExternalCustomerIDColumn,
		PlanID:             PlanIDColumn,
		ProductID:          ProductIDColumn,
		OrganizationID:     OrganizationIDColumn,
		InsertedAt:         InsertedAtColumn,
		UpdatedAt:          UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
