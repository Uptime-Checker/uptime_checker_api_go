//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var User = newUserTable("public", "user", "")

type userTable struct {
	postgres.Table

	//Columns
	ID                postgres.ColumnInteger
	Name              postgres.ColumnString
	Email             postgres.ColumnString
	PictureURL        postgres.ColumnString
	Password          postgres.ColumnString
	PaymentCustomerID postgres.ColumnString
	ProviderUID       postgres.ColumnString
	Provider          postgres.ColumnInteger
	LastLoginAt       postgres.ColumnTimestamp
	RoleID            postgres.ColumnInteger
	OrganizationID    postgres.ColumnInteger
	InsertedAt        postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserTable struct {
	userTable

	EXCLUDED userTable
}

// AS creates new UserTable with assigned alias
func (a UserTable) AS(alias string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserTable with assigned schema name
func (a UserTable) FromSchema(schemaName string) *UserTable {
	return newUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserTable with assigned table prefix
func (a UserTable) WithPrefix(prefix string) *UserTable {
	return newUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserTable with assigned table suffix
func (a UserTable) WithSuffix(suffix string) *UserTable {
	return newUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserTable(schemaName, tableName, alias string) *UserTable {
	return &UserTable{
		userTable: newUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newUserTableImpl("", "excluded", ""),
	}
}

func newUserTableImpl(schemaName, tableName, alias string) userTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		NameColumn              = postgres.StringColumn("name")
		EmailColumn             = postgres.StringColumn("email")
		PictureURLColumn        = postgres.StringColumn("picture_url")
		PasswordColumn          = postgres.StringColumn("password")
		PaymentCustomerIDColumn = postgres.StringColumn("payment_customer_id")
		ProviderUIDColumn       = postgres.StringColumn("provider_uid")
		ProviderColumn          = postgres.IntegerColumn("provider")
		LastLoginAtColumn       = postgres.TimestampColumn("last_login_at")
		RoleIDColumn            = postgres.IntegerColumn("role_id")
		OrganizationIDColumn    = postgres.IntegerColumn("organization_id")
		InsertedAtColumn        = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		allColumns              = postgres.ColumnList{IDColumn, NameColumn, EmailColumn, PictureURLColumn, PasswordColumn, PaymentCustomerIDColumn, ProviderUIDColumn, ProviderColumn, LastLoginAtColumn, RoleIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{NameColumn, EmailColumn, PictureURLColumn, PasswordColumn, PaymentCustomerIDColumn, ProviderUIDColumn, ProviderColumn, LastLoginAtColumn, RoleIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return userTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Name:              NameColumn,
		Email:             EmailColumn,
		PictureURL:        PictureURLColumn,
		Password:          PasswordColumn,
		PaymentCustomerID: PaymentCustomerIDColumn,
		ProviderUID:       ProviderUIDColumn,
		Provider:          ProviderColumn,
		LastLoginAt:       LastLoginAtColumn,
		RoleID:            RoleIDColumn,
		OrganizationID:    OrganizationIDColumn,
		InsertedAt:        InsertedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
