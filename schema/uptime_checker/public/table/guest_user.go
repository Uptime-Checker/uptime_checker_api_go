//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var GuestUser = newGuestUserTable("public", "guest_user", "")

type guestUserTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Email      postgres.ColumnString
	Code       postgres.ColumnString
	ExpiresAt  postgres.ColumnTimestamp
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type GuestUserTable struct {
	guestUserTable

	EXCLUDED guestUserTable
}

// AS creates new GuestUserTable with assigned alias
func (a GuestUserTable) AS(alias string) *GuestUserTable {
	return newGuestUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GuestUserTable with assigned schema name
func (a GuestUserTable) FromSchema(schemaName string) *GuestUserTable {
	return newGuestUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GuestUserTable with assigned table prefix
func (a GuestUserTable) WithPrefix(prefix string) *GuestUserTable {
	return newGuestUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GuestUserTable with assigned table suffix
func (a GuestUserTable) WithSuffix(suffix string) *GuestUserTable {
	return newGuestUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGuestUserTable(schemaName, tableName, alias string) *GuestUserTable {
	return &GuestUserTable{
		guestUserTable: newGuestUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newGuestUserTableImpl("", "excluded", ""),
	}
}

func newGuestUserTableImpl(schemaName, tableName, alias string) guestUserTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		EmailColumn      = postgres.StringColumn("email")
		CodeColumn       = postgres.StringColumn("code")
		ExpiresAtColumn  = postgres.TimestampColumn("expires_at")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, EmailColumn, CodeColumn, ExpiresAtColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{EmailColumn, CodeColumn, ExpiresAtColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return guestUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Email:      EmailColumn,
		Code:       CodeColumn,
		ExpiresAt:  ExpiresAtColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
