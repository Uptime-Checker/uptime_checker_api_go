//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Plan = newPlanTable("public", "plan", "")

type planTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Price      postgres.ColumnFloat
	Type       postgres.ColumnInteger
	ExternalID postgres.ColumnString
	ProductID  postgres.ColumnInteger
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type PlanTable struct {
	planTable

	EXCLUDED planTable
}

// AS creates new PlanTable with assigned alias
func (a PlanTable) AS(alias string) *PlanTable {
	return newPlanTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlanTable with assigned schema name
func (a PlanTable) FromSchema(schemaName string) *PlanTable {
	return newPlanTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlanTable with assigned table prefix
func (a PlanTable) WithPrefix(prefix string) *PlanTable {
	return newPlanTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlanTable with assigned table suffix
func (a PlanTable) WithSuffix(suffix string) *PlanTable {
	return newPlanTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlanTable(schemaName, tableName, alias string) *PlanTable {
	return &PlanTable{
		planTable: newPlanTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newPlanTableImpl("", "excluded", ""),
	}
}

func newPlanTableImpl(schemaName, tableName, alias string) planTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		PriceColumn      = postgres.FloatColumn("price")
		TypeColumn       = postgres.IntegerColumn("type")
		ExternalIDColumn = postgres.StringColumn("external_id")
		ProductIDColumn  = postgres.IntegerColumn("product_id")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, PriceColumn, TypeColumn, ExternalIDColumn, ProductIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{PriceColumn, TypeColumn, ExternalIDColumn, ProductIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return planTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Price:      PriceColumn,
		Type:       TypeColumn,
		ExternalID: ExternalIDColumn,
		ProductID:  ProductIDColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
