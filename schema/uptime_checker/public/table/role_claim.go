//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var RoleClaim = newRoleClaimTable("public", "role_claim", "")

type roleClaimTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Claim      postgres.ColumnString
	RoleID     postgres.ColumnInteger
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RoleClaimTable struct {
	roleClaimTable

	EXCLUDED roleClaimTable
}

// AS creates new RoleClaimTable with assigned alias
func (a RoleClaimTable) AS(alias string) *RoleClaimTable {
	return newRoleClaimTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoleClaimTable with assigned schema name
func (a RoleClaimTable) FromSchema(schemaName string) *RoleClaimTable {
	return newRoleClaimTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RoleClaimTable with assigned table prefix
func (a RoleClaimTable) WithPrefix(prefix string) *RoleClaimTable {
	return newRoleClaimTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RoleClaimTable with assigned table suffix
func (a RoleClaimTable) WithSuffix(suffix string) *RoleClaimTable {
	return newRoleClaimTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRoleClaimTable(schemaName, tableName, alias string) *RoleClaimTable {
	return &RoleClaimTable{
		roleClaimTable: newRoleClaimTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newRoleClaimTableImpl("", "excluded", ""),
	}
}

func newRoleClaimTableImpl(schemaName, tableName, alias string) roleClaimTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		ClaimColumn      = postgres.StringColumn("claim")
		RoleIDColumn     = postgres.IntegerColumn("role_id")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, ClaimColumn, RoleIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{ClaimColumn, RoleIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return roleClaimTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Claim:      ClaimColumn,
		RoleID:     RoleIDColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
