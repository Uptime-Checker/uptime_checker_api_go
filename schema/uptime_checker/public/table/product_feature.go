//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ProductFeature = newProductFeatureTable("public", "product_feature", "")

type productFeatureTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Count      postgres.ColumnInteger
	ProductID  postgres.ColumnInteger
	FeatureID  postgres.ColumnInteger
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ProductFeatureTable struct {
	productFeatureTable

	EXCLUDED productFeatureTable
}

// AS creates new ProductFeatureTable with assigned alias
func (a ProductFeatureTable) AS(alias string) *ProductFeatureTable {
	return newProductFeatureTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ProductFeatureTable with assigned schema name
func (a ProductFeatureTable) FromSchema(schemaName string) *ProductFeatureTable {
	return newProductFeatureTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ProductFeatureTable with assigned table prefix
func (a ProductFeatureTable) WithPrefix(prefix string) *ProductFeatureTable {
	return newProductFeatureTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ProductFeatureTable with assigned table suffix
func (a ProductFeatureTable) WithSuffix(suffix string) *ProductFeatureTable {
	return newProductFeatureTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newProductFeatureTable(schemaName, tableName, alias string) *ProductFeatureTable {
	return &ProductFeatureTable{
		productFeatureTable: newProductFeatureTableImpl(schemaName, tableName, alias),
		EXCLUDED:            newProductFeatureTableImpl("", "excluded", ""),
	}
}

func newProductFeatureTableImpl(schemaName, tableName, alias string) productFeatureTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		CountColumn      = postgres.IntegerColumn("count")
		ProductIDColumn  = postgres.IntegerColumn("product_id")
		FeatureIDColumn  = postgres.IntegerColumn("feature_id")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, CountColumn, ProductIDColumn, FeatureIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{CountColumn, ProductIDColumn, FeatureIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return productFeatureTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Count:      CountColumn,
		ProductID:  ProductIDColumn,
		FeatureID:  FeatureIDColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
