//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ErrorLog = newErrorLogTable("public", "error_log", "")

type errorLogTable struct {
	postgres.Table

	//Columns
	ID            postgres.ColumnInteger
	Text          postgres.ColumnString
	Type          postgres.ColumnInteger
	ScreenshotURL postgres.ColumnString
	CheckID       postgres.ColumnInteger
	MonitorID     postgres.ColumnInteger
	AssertionID   postgres.ColumnInteger
	InsertedAt    postgres.ColumnTimestamp
	UpdatedAt     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ErrorLogTable struct {
	errorLogTable

	EXCLUDED errorLogTable
}

// AS creates new ErrorLogTable with assigned alias
func (a ErrorLogTable) AS(alias string) *ErrorLogTable {
	return newErrorLogTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ErrorLogTable with assigned schema name
func (a ErrorLogTable) FromSchema(schemaName string) *ErrorLogTable {
	return newErrorLogTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ErrorLogTable with assigned table prefix
func (a ErrorLogTable) WithPrefix(prefix string) *ErrorLogTable {
	return newErrorLogTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ErrorLogTable with assigned table suffix
func (a ErrorLogTable) WithSuffix(suffix string) *ErrorLogTable {
	return newErrorLogTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newErrorLogTable(schemaName, tableName, alias string) *ErrorLogTable {
	return &ErrorLogTable{
		errorLogTable: newErrorLogTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newErrorLogTableImpl("", "excluded", ""),
	}
}

func newErrorLogTableImpl(schemaName, tableName, alias string) errorLogTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		TextColumn          = postgres.StringColumn("text")
		TypeColumn          = postgres.IntegerColumn("type")
		ScreenshotURLColumn = postgres.StringColumn("screenshot_url")
		CheckIDColumn       = postgres.IntegerColumn("check_id")
		MonitorIDColumn     = postgres.IntegerColumn("monitor_id")
		AssertionIDColumn   = postgres.IntegerColumn("assertion_id")
		InsertedAtColumn    = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn     = postgres.TimestampColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, TextColumn, TypeColumn, ScreenshotURLColumn, CheckIDColumn, MonitorIDColumn, AssertionIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{TextColumn, TypeColumn, ScreenshotURLColumn, CheckIDColumn, MonitorIDColumn, AssertionIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return errorLogTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Text:          TextColumn,
		Type:          TypeColumn,
		ScreenshotURL: ScreenshotURLColumn,
		CheckID:       CheckIDColumn,
		MonitorID:     MonitorIDColumn,
		AssertionID:   AssertionIDColumn,
		InsertedAt:    InsertedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
