//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MonitorStatusChange = newMonitorStatusChangeTable("public", "monitor_status_change", "")

type monitorStatusChangeTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Status     postgres.ColumnInteger
	ChangedAt  postgres.ColumnTimestamp
	MonitorID  postgres.ColumnInteger
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MonitorStatusChangeTable struct {
	monitorStatusChangeTable

	EXCLUDED monitorStatusChangeTable
}

// AS creates new MonitorStatusChangeTable with assigned alias
func (a MonitorStatusChangeTable) AS(alias string) *MonitorStatusChangeTable {
	return newMonitorStatusChangeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MonitorStatusChangeTable with assigned schema name
func (a MonitorStatusChangeTable) FromSchema(schemaName string) *MonitorStatusChangeTable {
	return newMonitorStatusChangeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MonitorStatusChangeTable with assigned table prefix
func (a MonitorStatusChangeTable) WithPrefix(prefix string) *MonitorStatusChangeTable {
	return newMonitorStatusChangeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MonitorStatusChangeTable with assigned table suffix
func (a MonitorStatusChangeTable) WithSuffix(suffix string) *MonitorStatusChangeTable {
	return newMonitorStatusChangeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMonitorStatusChangeTable(schemaName, tableName, alias string) *MonitorStatusChangeTable {
	return &MonitorStatusChangeTable{
		monitorStatusChangeTable: newMonitorStatusChangeTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newMonitorStatusChangeTableImpl("", "excluded", ""),
	}
}

func newMonitorStatusChangeTableImpl(schemaName, tableName, alias string) monitorStatusChangeTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		StatusColumn     = postgres.IntegerColumn("status")
		ChangedAtColumn  = postgres.TimestampColumn("changed_at")
		MonitorIDColumn  = postgres.IntegerColumn("monitor_id")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, StatusColumn, ChangedAtColumn, MonitorIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{StatusColumn, ChangedAtColumn, MonitorIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return monitorStatusChangeTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Status:     StatusColumn,
		ChangedAt:  ChangedAtColumn,
		MonitorID:  MonitorIDColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
