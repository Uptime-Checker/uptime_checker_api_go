//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MonitorRegion = newMonitorRegionTable("public", "monitor_region", "")

type monitorRegionTable struct {
	postgres.Table

	//Columns
	ID            postgres.ColumnInteger
	Down          postgres.ColumnBool
	LastCheckedAt postgres.ColumnTimestamp
	MonitorID     postgres.ColumnInteger
	RegionID      postgres.ColumnInteger
	InsertedAt    postgres.ColumnTimestamp
	UpdatedAt     postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MonitorRegionTable struct {
	monitorRegionTable

	EXCLUDED monitorRegionTable
}

// AS creates new MonitorRegionTable with assigned alias
func (a MonitorRegionTable) AS(alias string) *MonitorRegionTable {
	return newMonitorRegionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MonitorRegionTable with assigned schema name
func (a MonitorRegionTable) FromSchema(schemaName string) *MonitorRegionTable {
	return newMonitorRegionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MonitorRegionTable with assigned table prefix
func (a MonitorRegionTable) WithPrefix(prefix string) *MonitorRegionTable {
	return newMonitorRegionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MonitorRegionTable with assigned table suffix
func (a MonitorRegionTable) WithSuffix(suffix string) *MonitorRegionTable {
	return newMonitorRegionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMonitorRegionTable(schemaName, tableName, alias string) *MonitorRegionTable {
	return &MonitorRegionTable{
		monitorRegionTable: newMonitorRegionTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newMonitorRegionTableImpl("", "excluded", ""),
	}
}

func newMonitorRegionTableImpl(schemaName, tableName, alias string) monitorRegionTable {
	var (
		IDColumn            = postgres.IntegerColumn("id")
		DownColumn          = postgres.BoolColumn("down")
		LastCheckedAtColumn = postgres.TimestampColumn("last_checked_at")
		MonitorIDColumn     = postgres.IntegerColumn("monitor_id")
		RegionIDColumn      = postgres.IntegerColumn("region_id")
		InsertedAtColumn    = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn     = postgres.TimestampColumn("updated_at")
		allColumns          = postgres.ColumnList{IDColumn, DownColumn, LastCheckedAtColumn, MonitorIDColumn, RegionIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns      = postgres.ColumnList{DownColumn, LastCheckedAtColumn, MonitorIDColumn, RegionIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return monitorRegionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		Down:          DownColumn,
		LastCheckedAt: LastCheckedAtColumn,
		MonitorID:     MonitorIDColumn,
		RegionID:      RegionIDColumn,
		InsertedAt:    InsertedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
