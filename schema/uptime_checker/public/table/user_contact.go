//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserContact = newUserContactTable("public", "user_contact", "")

type userContactTable struct {
	postgres.Table

	//Columns
	ID                        postgres.ColumnInteger
	Email                     postgres.ColumnString
	Number                    postgres.ColumnString
	Mode                      postgres.ColumnInteger
	DeviceID                  postgres.ColumnString
	VerificationCode          postgres.ColumnString
	VerificationCodeExpiresAt postgres.ColumnTimestamp
	Verified                  postgres.ColumnBool
	Subscribed                postgres.ColumnBool
	BounceCount               postgres.ColumnInteger
	UserID                    postgres.ColumnInteger
	InsertedAt                postgres.ColumnTimestamp
	UpdatedAt                 postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserContactTable struct {
	userContactTable

	EXCLUDED userContactTable
}

// AS creates new UserContactTable with assigned alias
func (a UserContactTable) AS(alias string) *UserContactTable {
	return newUserContactTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserContactTable with assigned schema name
func (a UserContactTable) FromSchema(schemaName string) *UserContactTable {
	return newUserContactTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserContactTable with assigned table prefix
func (a UserContactTable) WithPrefix(prefix string) *UserContactTable {
	return newUserContactTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserContactTable with assigned table suffix
func (a UserContactTable) WithSuffix(suffix string) *UserContactTable {
	return newUserContactTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserContactTable(schemaName, tableName, alias string) *UserContactTable {
	return &UserContactTable{
		userContactTable: newUserContactTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newUserContactTableImpl("", "excluded", ""),
	}
}

func newUserContactTableImpl(schemaName, tableName, alias string) userContactTable {
	var (
		IDColumn                        = postgres.IntegerColumn("id")
		EmailColumn                     = postgres.StringColumn("email")
		NumberColumn                    = postgres.StringColumn("number")
		ModeColumn                      = postgres.IntegerColumn("mode")
		DeviceIDColumn                  = postgres.StringColumn("device_id")
		VerificationCodeColumn          = postgres.StringColumn("verification_code")
		VerificationCodeExpiresAtColumn = postgres.TimestampColumn("verification_code_expires_at")
		VerifiedColumn                  = postgres.BoolColumn("verified")
		SubscribedColumn                = postgres.BoolColumn("subscribed")
		BounceCountColumn               = postgres.IntegerColumn("bounce_count")
		UserIDColumn                    = postgres.IntegerColumn("user_id")
		InsertedAtColumn                = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn                 = postgres.TimestampColumn("updated_at")
		allColumns                      = postgres.ColumnList{IDColumn, EmailColumn, NumberColumn, ModeColumn, DeviceIDColumn, VerificationCodeColumn, VerificationCodeExpiresAtColumn, VerifiedColumn, SubscribedColumn, BounceCountColumn, UserIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns                  = postgres.ColumnList{EmailColumn, NumberColumn, ModeColumn, DeviceIDColumn, VerificationCodeColumn, VerificationCodeExpiresAtColumn, VerifiedColumn, SubscribedColumn, BounceCountColumn, UserIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return userContactTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                        IDColumn,
		Email:                     EmailColumn,
		Number:                    NumberColumn,
		Mode:                      ModeColumn,
		DeviceID:                  DeviceIDColumn,
		VerificationCode:          VerificationCodeColumn,
		VerificationCodeExpiresAt: VerificationCodeExpiresAtColumn,
		Verified:                  VerifiedColumn,
		Subscribed:                SubscribedColumn,
		BounceCount:               BounceCountColumn,
		UserID:                    UserIDColumn,
		InsertedAt:                InsertedAtColumn,
		UpdatedAt:                 UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
