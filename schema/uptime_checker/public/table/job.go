//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Job = newJobTable("public", "job", "")

type jobTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Status     postgres.ColumnInteger
	On         postgres.ColumnBool
	Name       postgres.ColumnString
	Interval   postgres.ColumnInteger
	LastRanAt  postgres.ColumnTimestamp
	NextRunAt  postgres.ColumnTimestamp
	Recurring  postgres.ColumnBool
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type JobTable struct {
	jobTable

	EXCLUDED jobTable
}

// AS creates new JobTable with assigned alias
func (a JobTable) AS(alias string) *JobTable {
	return newJobTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new JobTable with assigned schema name
func (a JobTable) FromSchema(schemaName string) *JobTable {
	return newJobTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new JobTable with assigned table prefix
func (a JobTable) WithPrefix(prefix string) *JobTable {
	return newJobTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new JobTable with assigned table suffix
func (a JobTable) WithSuffix(suffix string) *JobTable {
	return newJobTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newJobTable(schemaName, tableName, alias string) *JobTable {
	return &JobTable{
		jobTable: newJobTableImpl(schemaName, tableName, alias),
		EXCLUDED: newJobTableImpl("", "excluded", ""),
	}
}

func newJobTableImpl(schemaName, tableName, alias string) jobTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		StatusColumn     = postgres.IntegerColumn("status")
		OnColumn         = postgres.BoolColumn("on")
		NameColumn       = postgres.StringColumn("name")
		IntervalColumn   = postgres.IntegerColumn("interval")
		LastRanAtColumn  = postgres.TimestampColumn("last_ran_at")
		NextRunAtColumn  = postgres.TimestampColumn("next_run_at")
		RecurringColumn  = postgres.BoolColumn("recurring")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, StatusColumn, OnColumn, NameColumn, IntervalColumn, LastRanAtColumn, NextRunAtColumn, RecurringColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{StatusColumn, OnColumn, NameColumn, IntervalColumn, LastRanAtColumn, NextRunAtColumn, RecurringColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return jobTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Status:     StatusColumn,
		On:         OnColumn,
		Name:       NameColumn,
		Interval:   IntervalColumn,
		LastRanAt:  LastRanAtColumn,
		NextRunAt:  NextRunAtColumn,
		Recurring:  RecurringColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
