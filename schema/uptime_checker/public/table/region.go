//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Region = newRegionTable("public", "region", "")

type regionTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Name       postgres.ColumnString
	Key        postgres.ColumnString
	IPAddress  postgres.ColumnString
	Default    postgres.ColumnBool
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RegionTable struct {
	regionTable

	EXCLUDED regionTable
}

// AS creates new RegionTable with assigned alias
func (a RegionTable) AS(alias string) *RegionTable {
	return newRegionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RegionTable with assigned schema name
func (a RegionTable) FromSchema(schemaName string) *RegionTable {
	return newRegionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RegionTable with assigned table prefix
func (a RegionTable) WithPrefix(prefix string) *RegionTable {
	return newRegionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RegionTable with assigned table suffix
func (a RegionTable) WithSuffix(suffix string) *RegionTable {
	return newRegionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRegionTable(schemaName, tableName, alias string) *RegionTable {
	return &RegionTable{
		regionTable: newRegionTableImpl(schemaName, tableName, alias),
		EXCLUDED:    newRegionTableImpl("", "excluded", ""),
	}
}

func newRegionTableImpl(schemaName, tableName, alias string) regionTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		NameColumn       = postgres.StringColumn("name")
		KeyColumn        = postgres.StringColumn("key")
		IPAddressColumn  = postgres.StringColumn("ip_address")
		DefaultColumn    = postgres.BoolColumn("default")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, NameColumn, KeyColumn, IPAddressColumn, DefaultColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{NameColumn, KeyColumn, IPAddressColumn, DefaultColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return regionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Name:       NameColumn,
		Key:        KeyColumn,
		IPAddress:  IPAddressColumn,
		Default:    DefaultColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
