//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var OrganizationUser = newOrganizationUserTable("public", "organization_user", "")

type organizationUserTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnInteger
	Status         postgres.ColumnInteger
	RoleID         postgres.ColumnInteger
	UserID         postgres.ColumnInteger
	OrganizationID postgres.ColumnInteger
	InsertedAt     postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type OrganizationUserTable struct {
	organizationUserTable

	EXCLUDED organizationUserTable
}

// AS creates new OrganizationUserTable with assigned alias
func (a OrganizationUserTable) AS(alias string) *OrganizationUserTable {
	return newOrganizationUserTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OrganizationUserTable with assigned schema name
func (a OrganizationUserTable) FromSchema(schemaName string) *OrganizationUserTable {
	return newOrganizationUserTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OrganizationUserTable with assigned table prefix
func (a OrganizationUserTable) WithPrefix(prefix string) *OrganizationUserTable {
	return newOrganizationUserTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OrganizationUserTable with assigned table suffix
func (a OrganizationUserTable) WithSuffix(suffix string) *OrganizationUserTable {
	return newOrganizationUserTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOrganizationUserTable(schemaName, tableName, alias string) *OrganizationUserTable {
	return &OrganizationUserTable{
		organizationUserTable: newOrganizationUserTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newOrganizationUserTableImpl("", "excluded", ""),
	}
}

func newOrganizationUserTableImpl(schemaName, tableName, alias string) organizationUserTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		StatusColumn         = postgres.IntegerColumn("status")
		RoleIDColumn         = postgres.IntegerColumn("role_id")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		OrganizationIDColumn = postgres.IntegerColumn("organization_id")
		InsertedAtColumn     = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, StatusColumn, RoleIDColumn, UserIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{StatusColumn, RoleIDColumn, UserIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return organizationUserTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		Status:         StatusColumn,
		RoleID:         RoleIDColumn,
		UserID:         UserIDColumn,
		OrganizationID: OrganizationIDColumn,
		InsertedAt:     InsertedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
