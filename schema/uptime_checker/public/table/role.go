//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Role = newRoleTable("public", "role", "")

type roleTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Name       postgres.ColumnString
	Type       postgres.ColumnInteger
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type RoleTable struct {
	roleTable

	EXCLUDED roleTable
}

// AS creates new RoleTable with assigned alias
func (a RoleTable) AS(alias string) *RoleTable {
	return newRoleTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new RoleTable with assigned schema name
func (a RoleTable) FromSchema(schemaName string) *RoleTable {
	return newRoleTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new RoleTable with assigned table prefix
func (a RoleTable) WithPrefix(prefix string) *RoleTable {
	return newRoleTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new RoleTable with assigned table suffix
func (a RoleTable) WithSuffix(suffix string) *RoleTable {
	return newRoleTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newRoleTable(schemaName, tableName, alias string) *RoleTable {
	return &RoleTable{
		roleTable: newRoleTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newRoleTableImpl("", "excluded", ""),
	}
}

func newRoleTableImpl(schemaName, tableName, alias string) roleTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		NameColumn       = postgres.StringColumn("name")
		TypeColumn       = postgres.IntegerColumn("type")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, NameColumn, TypeColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{NameColumn, TypeColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return roleTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Name:       NameColumn,
		Type:       TypeColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
