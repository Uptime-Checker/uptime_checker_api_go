//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Invitation = newInvitationTable("public", "invitation", "")

type invitationTable struct {
	postgres.Table

	//Columns
	ID                postgres.ColumnInteger
	Email             postgres.ColumnString
	Code              postgres.ColumnString
	ExpiresAt         postgres.ColumnTimestamp
	NotificationCount postgres.ColumnInteger
	InvitedByUserID   postgres.ColumnInteger
	RoleID            postgres.ColumnInteger
	OrganizationID    postgres.ColumnInteger
	InsertedAt        postgres.ColumnTimestamp
	UpdatedAt         postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type InvitationTable struct {
	invitationTable

	EXCLUDED invitationTable
}

// AS creates new InvitationTable with assigned alias
func (a InvitationTable) AS(alias string) *InvitationTable {
	return newInvitationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InvitationTable with assigned schema name
func (a InvitationTable) FromSchema(schemaName string) *InvitationTable {
	return newInvitationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InvitationTable with assigned table prefix
func (a InvitationTable) WithPrefix(prefix string) *InvitationTable {
	return newInvitationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InvitationTable with assigned table suffix
func (a InvitationTable) WithSuffix(suffix string) *InvitationTable {
	return newInvitationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInvitationTable(schemaName, tableName, alias string) *InvitationTable {
	return &InvitationTable{
		invitationTable: newInvitationTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newInvitationTableImpl("", "excluded", ""),
	}
}

func newInvitationTableImpl(schemaName, tableName, alias string) invitationTable {
	var (
		IDColumn                = postgres.IntegerColumn("id")
		EmailColumn             = postgres.StringColumn("email")
		CodeColumn              = postgres.StringColumn("code")
		ExpiresAtColumn         = postgres.TimestampColumn("expires_at")
		NotificationCountColumn = postgres.IntegerColumn("notification_count")
		InvitedByUserIDColumn   = postgres.IntegerColumn("invited_by_user_id")
		RoleIDColumn            = postgres.IntegerColumn("role_id")
		OrganizationIDColumn    = postgres.IntegerColumn("organization_id")
		InsertedAtColumn        = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn         = postgres.TimestampColumn("updated_at")
		allColumns              = postgres.ColumnList{IDColumn, EmailColumn, CodeColumn, ExpiresAtColumn, NotificationCountColumn, InvitedByUserIDColumn, RoleIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns          = postgres.ColumnList{EmailColumn, CodeColumn, ExpiresAtColumn, NotificationCountColumn, InvitedByUserIDColumn, RoleIDColumn, OrganizationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return invitationTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                IDColumn,
		Email:             EmailColumn,
		Code:              CodeColumn,
		ExpiresAt:         ExpiresAtColumn,
		NotificationCount: NotificationCountColumn,
		InvitedByUserID:   InvitedByUserIDColumn,
		RoleID:            RoleIDColumn,
		OrganizationID:    OrganizationIDColumn,
		InsertedAt:        InsertedAtColumn,
		UpdatedAt:         UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
