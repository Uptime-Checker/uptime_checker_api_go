//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var MonitorNotificationPolicy = newMonitorNotificationPolicyTable("public", "monitor_notification_policy", "")

type monitorNotificationPolicyTable struct {
	postgres.Table

	//Columns
	ID             postgres.ColumnInteger
	UserID         postgres.ColumnInteger
	MonitorID      postgres.ColumnInteger
	OrganizationID postgres.ColumnInteger
	IntegrationID  postgres.ColumnInteger
	InsertedAt     postgres.ColumnTimestamp
	UpdatedAt      postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type MonitorNotificationPolicyTable struct {
	monitorNotificationPolicyTable

	EXCLUDED monitorNotificationPolicyTable
}

// AS creates new MonitorNotificationPolicyTable with assigned alias
func (a MonitorNotificationPolicyTable) AS(alias string) *MonitorNotificationPolicyTable {
	return newMonitorNotificationPolicyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new MonitorNotificationPolicyTable with assigned schema name
func (a MonitorNotificationPolicyTable) FromSchema(schemaName string) *MonitorNotificationPolicyTable {
	return newMonitorNotificationPolicyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new MonitorNotificationPolicyTable with assigned table prefix
func (a MonitorNotificationPolicyTable) WithPrefix(prefix string) *MonitorNotificationPolicyTable {
	return newMonitorNotificationPolicyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new MonitorNotificationPolicyTable with assigned table suffix
func (a MonitorNotificationPolicyTable) WithSuffix(suffix string) *MonitorNotificationPolicyTable {
	return newMonitorNotificationPolicyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newMonitorNotificationPolicyTable(schemaName, tableName, alias string) *MonitorNotificationPolicyTable {
	return &MonitorNotificationPolicyTable{
		monitorNotificationPolicyTable: newMonitorNotificationPolicyTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newMonitorNotificationPolicyTableImpl("", "excluded", ""),
	}
}

func newMonitorNotificationPolicyTableImpl(schemaName, tableName, alias string) monitorNotificationPolicyTable {
	var (
		IDColumn             = postgres.IntegerColumn("id")
		UserIDColumn         = postgres.IntegerColumn("user_id")
		MonitorIDColumn      = postgres.IntegerColumn("monitor_id")
		OrganizationIDColumn = postgres.IntegerColumn("organization_id")
		IntegrationIDColumn  = postgres.IntegerColumn("integration_id")
		InsertedAtColumn     = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn      = postgres.TimestampColumn("updated_at")
		allColumns           = postgres.ColumnList{IDColumn, UserIDColumn, MonitorIDColumn, OrganizationIDColumn, IntegrationIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{UserIDColumn, MonitorIDColumn, OrganizationIDColumn, IntegrationIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return monitorNotificationPolicyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:             IDColumn,
		UserID:         UserIDColumn,
		MonitorID:      MonitorIDColumn,
		OrganizationID: OrganizationIDColumn,
		IntegrationID:  IntegrationIDColumn,
		InsertedAt:     InsertedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
