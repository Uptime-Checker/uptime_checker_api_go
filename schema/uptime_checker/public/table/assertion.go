//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Assertion = newAssertionTable("public", "assertion", "")

type assertionTable struct {
	postgres.Table

	//Columns
	ID         postgres.ColumnInteger
	Source     postgres.ColumnInteger
	Property   postgres.ColumnString
	Comparison postgres.ColumnInteger
	Value      postgres.ColumnString
	MonitorID  postgres.ColumnInteger
	InsertedAt postgres.ColumnTimestamp
	UpdatedAt  postgres.ColumnTimestamp

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type AssertionTable struct {
	assertionTable

	EXCLUDED assertionTable
}

// AS creates new AssertionTable with assigned alias
func (a AssertionTable) AS(alias string) *AssertionTable {
	return newAssertionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AssertionTable with assigned schema name
func (a AssertionTable) FromSchema(schemaName string) *AssertionTable {
	return newAssertionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AssertionTable with assigned table prefix
func (a AssertionTable) WithPrefix(prefix string) *AssertionTable {
	return newAssertionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AssertionTable with assigned table suffix
func (a AssertionTable) WithSuffix(suffix string) *AssertionTable {
	return newAssertionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAssertionTable(schemaName, tableName, alias string) *AssertionTable {
	return &AssertionTable{
		assertionTable: newAssertionTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newAssertionTableImpl("", "excluded", ""),
	}
}

func newAssertionTableImpl(schemaName, tableName, alias string) assertionTable {
	var (
		IDColumn         = postgres.IntegerColumn("id")
		SourceColumn     = postgres.IntegerColumn("source")
		PropertyColumn   = postgres.StringColumn("property")
		ComparisonColumn = postgres.IntegerColumn("comparison")
		ValueColumn      = postgres.StringColumn("value")
		MonitorIDColumn  = postgres.IntegerColumn("monitor_id")
		InsertedAtColumn = postgres.TimestampColumn("inserted_at")
		UpdatedAtColumn  = postgres.TimestampColumn("updated_at")
		allColumns       = postgres.ColumnList{IDColumn, SourceColumn, PropertyColumn, ComparisonColumn, ValueColumn, MonitorIDColumn, InsertedAtColumn, UpdatedAtColumn}
		mutableColumns   = postgres.ColumnList{SourceColumn, PropertyColumn, ComparisonColumn, ValueColumn, MonitorIDColumn, InsertedAtColumn, UpdatedAtColumn}
	)

	return assertionTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		Source:     SourceColumn,
		Property:   PropertyColumn,
		Comparison: ComparisonColumn,
		Value:      ValueColumn,
		MonitorID:  MonitorIDColumn,
		InsertedAt: InsertedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
